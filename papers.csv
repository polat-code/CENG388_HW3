article, Zhang, Yuefeng, Test-Driven Modeling for Model-Driven Development, 2004, 21, 5, https://doi.org/10.1109/MS.2004.1331307, 10.1109/MS.2004.1331307, Extreme programming is a code-centric, lightweight software development process. Testing is key in XP because developers write test cases before they write code, and testing determines the code\'{y}s completion. A new software development process, called test-driven modeling, applies the XP test-driven paradigm in a model-driven development environment. TDM involves automatic testing through simulation and using executable models as living software system architecture documents. Compared to traditional plan-driven methods, TDM can save a significant amount of time because it reuses message sequence charts and modeling diagrams. Practical results show that TDM can effectively be applied to developing large projects with high quality in terms of the number of code defects., IEEE Softw., 1235
article, Damm, Lars-Ola and Lundberg, Lars and Olsson, David, Introducing Test Automation and Test-Driven Development, 2005, 116, C, Electron. Notes Theor. Comput. Sci., 371
article, Erdogmus, Hakan and Morisio, Maurizio and Torchiano, Marco, On the Effectiveness of the Test-First Approach to Programming, 2005, 31, 3, https://doi.org/10.1109/TSE.2005.37, 10.1109/TSE.2005.37, Test-Driven Development (TDD) is based on formalizing a piece of functionality as a test, implementing the functionality such that the test passes, and iterating the process. This paper describes a controlled experiment for evaluating an important aspect of TDD: In TDD, programmers write functional tests before the corresponding implementation code. The experiment was conducted with undergraduate students. While the experiment group applied a test-first strategy, the control group applied a more conventional development technique, writing tests after the implementation. Both groups followed an incremental process, adding new features one at a time and regression testing them. We found that test-first students on average wrote more tests and, in turn, students who wrote more tests tended to be more productive. We also observed that the minimum quality increased linearly with the number of programmer tests, independent of the development strategy employed., IEEE Trans. Softw. Eng., 953
article, Janzen, David and Saiedian, Hossein, Test-Driven Development: Concepts, Taxonomy, and Future Direction, 2005, 38, 9, https://doi.org/10.1109/MC.2005.314, 10.1109/MC.2005.314, Test-driven development creates software in very short iterations with minimal upfront design. Poised for widespread adoption TDD has become the focus of an increasing number of researchers and developers., Computer, 1282
article, Vodde, Bas and Koskela, Lasse, Learning Test-Driven Development by Counting Lines, 2007, 24, 3, https://doi.org/10.1109/MS.2007.80, 10.1109/MS.2007.80, IEEE Softw., 802
article, Leroy, Xavier, A Formally Verified Compiler Back-End, 2009, 43, 4, https://doi.org/10.1007/s10817-009-9155-4, 10.1007/s10817-009-9155-4, J. Autom. Reason., 249
article, Pan\v{c}ur, Matja and Ciglari\v{c}, Mojca, Impact of Test-Driven Development on Productivity, Code and Tests: A Controlled Experiment, 2011, 53, 6, https://doi.org/10.1016/j.infsof.2011.02.002, 10.1016/j.infsof.2011.02.002, Context: Test-driven development is an approach to software development, where automated tests are written before production code in highly iterative cycles. Test-driven development attracts attention as well as followers in professional environment; however empirical evidence of its superiority regarding its effect on productivity, code and tests compared to test-last development is still fairly limited. Moreover, it is not clear if the supposed benefits come from writing tests before code or maybe from high iterativity/short development cycles. Objective: This paper describes a family of controlled experiments comparing test-driven development to micro iterative test-last development with emphasis on productivity, code properties (external quality and complexity) and tests (code coverage and fault-finding capabilities). Method: Subjects were randomly assigned to test-driven and test-last groups. Controlled experiments were conducted for two years, in an academic environment and in different developer contexts (pair programming and individual programming contexts). Number of successfully implemented stories, percentage of successful acceptance tests, McCabe's code complexity, code coverage and mutation score indicator were measured. Results: Experimental results and their selective meta-analysis show no statistically significant differences between test-driven development and iterative test-last development regarding productivity (@g^2(, Inf. Softw. Technol., 413
article, Dog\v{s}a, Toma\v{z} and Bati\v{c}, David, The Effectiveness of Test-Driven Development: An Industrial Case Study, 2011, 19, 4, https://doi.org/10.1007/s11219-011-9130-2, 10.1007/s11219-011-9130-2, Software Quality Journal, 530
article, Latorre, Roberto, A Successful Application of a Test-Driven Development Strategy in the Industrial Environment, 2014, 19, 3, https://doi.org/10.1007/s10664-013-9281-9, 10.1007/s10664-013-9281-9, Empirical Softw. Engg., 430
conference paper, George, Boby and Williams, Laurie, An Initial Investigation of Test Driven Development in Industry, 2003, https://doi.org/10.1145/952532.952753, 10.1145/952532.952753, Proceedings of the 2003 ACM Symposium on Applied Computing, 42
conference paper, Leung, Karl R. P. H. and Yeung, W. L., Generating User Acceptance Test Plans from Test Cases, 2007, https://doi.org/10.1109/COMPSAC.2007.125, 10.1109/COMPSAC.2007.125, Proceedings of the 31st Annual International Computer Software and Applications Conference - Volume 02, 804
conference paper, Hammond, Susan and Umphress, David, Test Driven Development: The State of the Practice, 2012, https://doi.org/10.1145/2184512.2184550, 10.1145/2184512.2184550, Proceedings of the 50th Annual Southeast Regional Conference, 1345
conference paper, Munir, Hussan and Wnuk, Krzysztof and Petersen, Kai and Moayyed, Misagh, An Experimental Evaluation of Test Driven Development vs. Test-Last Development with Industry Professionals, 2014, https://doi.org/10.1145/2601248.2601267, 10.1145/2601248.2601267, Proceedings of the 18th International Conference on Evaluation and Assessment in Software Engineering, 987
conference paper, Santos, Ernani C\'{e}sar Dos and Vilain, Patr\'{\i}cia and Longo, Douglas Hiura, A Systematic Literature Review to Support the Selection of User Acceptance Testing Techniques, 2018, https://doi.org/10.1145/3183440.3195036, 10.1145/3183440.3195036, Proceedings of the 40th International Conference on Software Engineering: Companion Proceeedings, 585
conference paper, Tosun, Ayse and Ahmed, Muzamil and Turhan, Burak and Juristo, Natalia, On the Effectiveness of Unit Tests in Test-Driven Development, 2018, https://doi.org/10.1145/3202710.3203153, 10.1145/3202710.3203153, Proceedings of the 2018 International Conference on Software and System Process, 1188
